/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */

/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2008 Ben Fry and Casey Reas

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package com.tool_skeleton;


import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.IOException;
import java.io.PrintWriter;
//import java.net.ServerSocket;
//import java.net.Socket;

//import com.sun.net.httpserver.*;

import java.io.InputStream;
import java.io.OutputStream;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
//import org.apache.commons.text.StringEscapeUtils; fuck you java

import javax.swing.JOptionPane;

import processing.app.Editor;
import processing.app.tools.Tool;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.util.Collections;
/*
class Multi3 implements Runnable{
	
	public Editor editor;
	
	ServerSocket ss;
	
	public void AddToText(String text)
	{
		editor.getCurrentTab().setText(editor.getCurrentTab().getText() + text + "\n");
	}

	public void run(){  
	try {
		ss = new ServerSocket(8887);
		} catch (Exception e) {
				System.out.println(e);
			}
		
		System.out.println("server thread is running...");  
		while (true) {
			//editor.getCurrentTab().setText(editor.getCurrentTab().getText() + "thread is running...\n");
			try {
				Socket socket = ss.accept();
				System.out.println("connection accept");
				InputStream input = socket.getInputStream();
				//System.out.println("got data1");
				BufferedReader reader = new BufferedReader(new InputStreamReader(input));
				//System.out.println("got data2");
				String line = reader.readLine();    // reads a line of text
				//System.out.println("got data3");
				AddToText(line);
				
				OutputStream output = socket.getOutputStream();
				PrintWriter writer = new PrintWriter(output, true);
				writer.println("This is a message sent to the server");
				writer.println("This is a message sent to the server2");
				socket.close();
			} catch (Exception e) {
				System.out.println(e);
			}
		}
	}  

}*/


/**
 * Example Tools menu entry.
 */
public class Tool_Skeleton implements Tool {
	Editor editor;
	HttpServer server;

	public void init(Editor editor) {
		this.editor = editor;
		
		
		
	}


	public String getMenuTitle() {
		return "Start Teensy Audio GUI Server";
	}


	public void run() {
	try {
		server = HttpServer.create(new InetSocketAddress("localhost", 8001), 0);
		server.createContext("/test", new  MyHttpHandler());
		server.setExecutor(null);
		server.start();
		
		
		System.out.println(" Server started on port 8001");
	} catch (Exception e) {
		System.out.println(e);
	}
		
		editor.getCurrentTab().setText("");
	}
  
	public void Question()
	{
		String sketchName = editor.getSketch().getName();
		Object[] options = { "Yes, please", "No, thanks" };
		int result = JOptionPane.showOptionDialog(editor,
												  "Is " + sketchName +
												  " ready for destruction?",
												  "Super Mangle Tron",
												  JOptionPane.YES_NO_OPTION,
												  JOptionPane.QUESTION_MESSAGE,
												  null,
												  options,
												  options[1]);
		if (result == JOptionPane.YES_OPTION) {
		  mangleSelection();
		}
	}
/*
	public void StartTcpSocketServer()
	{
		Multi3 m1=new Multi3();
		m1.editor = this.editor;
		Thread t1 =new Thread(m1);  
		t1.start();  
	}
*/
	protected void mangleSelection() {
		//Check if there is selected text
		if (editor.getCurrentTab().getSelectedText() != null) {
		  String selection = editor.getCurrentTab().getSelectedText();
		  char[] stuff = selection.toCharArray();
		  
		  editor.getCurrentTab().setSelectedText(new String(stuff));
		  editor.statusNotice("Now that feels better, doesn't it?");

		} else {
		  //When there is no selected text
		 editor.statusError("No selection, no dice.");
		}
	}
}
class MyHttpHandler implements HttpHandler {    
	@Override    
	public void handle(HttpExchange httpExchange) throws IOException {
		String requestParamValue=null; 
		if("GET".equals(httpExchange.getRequestMethod())) { 
		   requestParamValue = handleGetRequest(httpExchange);
		//}else if("POST".equals(httpExchange)) { 
		//   requestParamValue = handlePostRequest(httpExchange);        
		}  
		handleResponse(httpExchange,requestParamValue); 
	}
	private String handleGetRequest(HttpExchange httpExchange) {
		return httpExchange.
			getRequestURI()
			.toString()
			.split("\\?")[1]
			.split("=")[1];
	}

	private void handleResponse(HttpExchange httpExchange, String requestParamValue)  throws  IOException {
		OutputStream outputStream = httpExchange.getResponseBody();
		StringBuilder htmlBuilder = new StringBuilder();

		htmlBuilder.append("<html>")
					.append("<body>")
					.append("<h1>")
					.append("Hello ")
					.append(requestParamValue)
					.append("</h1>")
					.append("</body>")
					.append("</html>");

		// encode HTML content 
		String htmlResponse = htmlBuilder.toString();
	  
		// this line is a must
		httpExchange.sendResponseHeaders(200, htmlResponse.length());
		outputStream.write(htmlResponse.getBytes());
		outputStream.flush();
		outputStream.close();
	}
}